/**
 * Santa Sudoku CSS
 */

/**
 * I don't use reset.css anymore. It's too strong of a style neutralizer, and
 * oftentimes a few styles that it neutralizes has to be re-declared, like list
 * styles. Normalize.css ensures a few basic styles to get things started, even if
 * the basic styles might be overwritten later.
 */
@import "normalize";

/**
 * Note on HSL:
 * I used to work exclusively with RGB, and can actually calculate from decimal
 * to hex and back pretty easily. HSL is easier to tweak on-the-fly though; if
 * I need to go from, say, light gray to dark gray, I just need to adjust the L
 * value, rather than change three values in RGB. Changing hues is easier too.
 */
$cell-border-color: hsl(0, 0, 85%);
$invalid-digit-color: hsl(0, 75%, 50%);

body {
	background-color: hsl(35, 100%, 99%);
	color: hsl(0, 0, 20%);
	font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

/**
 * This gets rid of the spinner arrows on number inputs. They were off-centering
 * the text within.
 */
input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
	-webkit-appearance: none;
	margin: 0;
}

.wrapper {
	padding: 20px 0;

	.outer-wrap {
		width: 90%;
		margin: 0 auto;
		text-align: center;
	}

	.sudoku-wrap {
		width: 100%;
		position: relative;

		// CSS squaring! Percentages in `padding` are based on the parent's width,
		// not height. This pseudo-element helps make sudoku-wrap a square.
		&:after {
			padding-top: 100%;
			display: block;
			content: '';
		}

	}

	.board-wrap {
		// The positioning makes the board expand out to cover its entire parent
		// container.
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		border: 3px solid $cell-border-color;
		border-radius: 10px;
		// Use `overflow: hidden` to hide corners poking outside the rounded borders.
		overflow: hidden;
	}
}

// The Sudoku board itself
.sudoku {
	width: 100%;
	height: 100%;

	tr {
		&:nth-child(3) .cell,
		&:nth-child(6) .cell {
			border-bottom: 3px solid $cell-border-color;
		}

		&:nth-child(9) .cell {
			border-bottom: none;
		}

		// Add a Christmas-y checkerboard pattern to the board :)
		&:nth-child(odd) .cell:nth-child(even),
		&:nth-child(even) .cell:nth-child(odd) {
			background-color: hsl(0, 100%, 90%);
		}

		&:nth-child(even) .cell:nth-child(even),
		&:nth-child(odd) .cell:nth-child(odd) {
			background-color: hsl(120, 100%, 90%);
		}
	}

	.cell {
		border-bottom: 2px dotted $cell-border-color;
		border-right: 2px dotted $cell-border-color;

		&:nth-child(3),
		&:nth-child(6) {
			border-right: 3px solid $cell-border-color;
		}

		&:nth-child(9) {
			border-right: none;
		}

		input {
			width: 100%;
			height: 100%;
			background: none;
			border: none;
			text-align: center;

			&.invalid {
				color: $invalid-digit-color;
			}
		}
	}
}

/** Santa sprite. Ho Ho Ho */
.santa {
	// The padding-bottom trick is a trick to keep the aspect ratio of an element
	// constant with fluid width. It's not just for squares!
	// Each GIF sprite is 600px by 240px, which comes down to a 5:2 aspect ratio.
	width: 100%;
	height: 0;
	padding-bottom: 40%;
	max-width: 600px;
	margin: 0 auto 1em;
	background: url(/img/santa_neutral.gif) center no-repeat;
	background-size: contain;

	&.coal {
		background-image: url(/img/santa_bad.gif);
	}

	&.merry-christmas {
		background-image: url(/img/santa_happy.gif);
	}
}

/**
 * If the screen is of a certain width, the board should take up a little less
 * space.
 */
@media only screen and (min-width: 1024px) {
	.outer-wrap {
		width: 80%;
		max-width: 600px;
	}

	.sudoku input {
		font-size: 2.5em;
	}
}
